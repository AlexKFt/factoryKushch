#include <unordered_map>
#include <unordered_set>
#include <vector>
#include "Pipe.hpp"
#include "CompressorStation.hpp"
#include "utils.hpp"



struct Link
{
    int pipeID;
    std::unordered_set<int> stationsIDs;
    //???
    int quantity;
};



class Network
{
private:
    std::vector<double> standartDiametrValues;
    std::vector<CompressorStation> networkNumeration;
    std::unordered_set<Link> currentLinks;

    int choosePipe();

    std::unordered_set<int> chooseStations();

    friend std::ostream& operator<<(std::ostream& out, const std::vector<double> values);

public:

    std::unordered_map<int, CompressorStation> stations;
    std::unordered_map<int, Pipe> pipes;

    void addLink();
    

};






// сделать словарь смежности: в качестве ключей хранить станции, в качестве значений множество труб, приходящих в эти станции
// можно одновременно создать обратный словарь, где ключами являются трубы(словари можно вынести в отдельный класс с математическим описанием, содержимое которого не будет демонстрироваться
// пользователю, записываться в файл, быть доступным вне методов класса Network)
// при выводе собирать в множество существующие соединения (возможно имеет смысл создать класс троек), направление одностороннее
// тогда нстоит охранить количество труб между узлами, если при создании нового соединения обнаруживается тройка с теми же станциями
// топологическая сортировка в этом случае будет выполняться с помощью двух словарей, результаты будут записываться в вектор, в котором индекс будет соответствовать номеру станции - 1, а
// значение по индексу - конкретная станция, вектор должен быть полем network и быть доступным для взаимодействия (например выбор действия с двумя станциями: добавить или удалить трубу) 
// принцип - выбираем две станции, задаём определённый стандартный вариант ширины трубы и ищем среди труб с данным диаметром (написать фильтр по величине диаметра) __поправка__ в этом
// случае не стоит вводить счётчик труб между станциями
// класс должен предоставлять интерфейс: добавление определённой трубы между станциями - проверка на существования свободных цехов, станции должны быть разными, труба не должна быть использована
// удаление связи - проверка, что связь существует, добавлени трубы в свободные, то есть обновление всех словарей (потенциально излишняя сложность)
// топологическая сортировка - получает на вход начальную точку (либо)
// вывод в консоль (вид station1 --(diametr)--> station2) направление задаётся топологической сортировкой, запись в файл (запись троек)
// считывание из файла (должно быть на основе существующих функций)